syntax = "proto3";

package flinkcoin.butler;
option go_package="github.com/flinkcoin/mono/libs/schema/pkg/butler";

import "libs/schema/pkg/core/core.proto";

message PaymentTransactionReq {
    flinkcoin.core.PaymentRequest paymentRequest = 1;
}

message PaymentTransactionRes {
     bool success = 1;
}

message TransactionReq {
    flinkcoin.core.Block block = 1;
}

message TransactionRes {
    bool success = 1;
}

message ListBlockReq {
    bytes accountId = 1;
    int32 num = 2;
}

message ListBlockRes {
    repeated flinkcoin.core.Block block = 1;
}

message ListUnclaimedBlockReq {
    bytes accountId = 1;
    int32 num = 2;
}

message ListUnclaimedBlockRes {
    repeated flinkcoin.core.Block block = 1;
}

message LastBlockReq {
    bytes accountId = 1;
}

message LastBlockRes {
    flinkcoin.core.Block block = 1;
}

message GetBlockReq {
    bytes blockHash = 1;
}

message GetBlockRes {
    flinkcoin.core.Block block = 1;
}

message AccountCountReq {
    int64 count = 1;
}

message AccountCountRes {
    int64 count = 1;
}

message InfoReq {
    int32 id = 1;
}

message InfoRes {
    enum InfoType {
        BLOCK_CONFIRM = 0;
        PAYMENT_RECEIVED = 1;
        PAYMENT_REQUEST = 2;
    }

    message BlockConfirm {
        bytes blockHash = 1;
    }

    message PaymentReceived {
        bytes blockHash = 1;
    }

    InfoType infoType = 1;
    bytes accountId = 2;
    BlockConfirm blockConfirm = 3;
    PaymentReceived paymentReceived = 4;
    flinkcoin.core.PaymentRequest paymentRequest = 5;
}

service AccountService {
    rpc getBlock(GetBlockReq) returns (GetBlockRes);
    rpc paymentRequest(PaymentTransactionReq) returns (PaymentTransactionRes);
    rpc transaction(TransactionReq) returns (TransactionRes);
    rpc numAccounts(AccountCountReq) returns (AccountCountRes);
    rpc listBlocks(ListBlockReq) returns (ListBlockRes);
    rpc lastBlock(LastBlockReq) returns (LastBlockRes);
    rpc listUnclaimedBlocks(ListUnclaimedBlockReq) returns (ListUnclaimedBlockRes);
    rpc receiveInfos(InfoReq) returns (stream InfoRes);
}
